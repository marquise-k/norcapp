{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/Users/mkamanke/Desktop/NORC-APP/norc-app/pages/App.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Cards from \"../components/Cards\"; // import firebase from '../components/Firebase';\n\nimport Searchbar from \"../components/Searchbar\";\nimport Sidebar from \"../components/Sidebar\";\nimport \"./App.css\";\nimport { loadFireBase } from \"../lib/database\";\nexport default class App extends Component {\n  static async getInitialProps() {\n    let firebase = await loadFirebase();\n    let result = await new _Promise((resolve, reject) => {\n      firebase.firestore().collection(\"cards\").limit(10).get().then(snapshot => {\n        let data = [];\n        snapshot.forEach(doc => {\n          data.push(_Object$assign({\n            id: doc.id\n          }, doc.data()));\n        });\n        resolve(data);\n      }).catch(error => {\n        reject([]);\n      });\n    });\n    return {\n      cards: result\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, __jsx(Searchbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), this.props.cards.map(card => __jsx(Card, {\n      key: card.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), __jsx(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/mkamanke/Desktop/NORC-APP/norc-app/pages/App.js"],"names":["React","useEffect","useState","Component","ReactDOM","Cards","Searchbar","Sidebar","loadFireBase","App","getInitialProps","firebase","loadFirebase","result","resolve","reject","firestore","collection","limit","get","then","snapshot","data","forEach","doc","push","id","catch","error","cards","render","props","map","card"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAO,WAAP;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,eAAe,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AACzC,eAAaO,eAAb,GAA+B;AAC7B,QAAIC,QAAQ,GAAG,MAAMC,YAAY,EAAjC;AACA,QAAIC,MAAM,GAAG,MAAM,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAClDJ,MAAAA,QAAQ,CACLK,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGC,KAHH,CAGS,EAHT,EAIGC,GAJH,GAKGC,IALH,CAKQC,QAAQ,IAAI;AAChB,YAAIC,IAAI,GAAG,EAAX;AACAD,QAAAA,QAAQ,CAACE,OAAT,CAAiBC,GAAG,IAAI;AACtBF,UAAAA,IAAI,CAACG,IAAL,CACE,eACE;AACEC,YAAAA,EAAE,EAAEF,GAAG,CAACE;AADV,WADF,EAIEF,GAAG,CAACF,IAAJ,EAJF,CADF;AAQD,SATD;AAUAR,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,OAlBH,EAmBGK,KAnBH,CAmBSC,KAAK,IAAI;AACdb,QAAAA,MAAM,CAAC,EAAD,CAAN;AACD,OArBH;AAsBD,KAvBkB,CAAnB;AAwBA,WAAO;AAAEc,MAAAA,KAAK,EAAEhB;AAAT,KAAP;AACD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKC,KAAL,CAAWF,KAAX,CAAiBG,GAAjB,CAAqBC,IAAI,IACxB,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACP,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,EAKE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD;;AAxCwC","sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Cards from \"../components/Cards\";\n// import firebase from '../components/Firebase';\nimport Searchbar from \"../components/Searchbar\";\nimport Sidebar from \"../components/Sidebar\";\nimport \"./App.css\";\nimport { loadFireBase } from \"../lib/database\";\n\nexport default class App extends Component {\n  static async getInitialProps() {\n    let firebase = await loadFirebase();\n    let result = await new Promise((resolve, reject) => {\n      firebase\n        .firestore()\n        .collection(\"cards\")\n        .limit(10)\n        .get()\n        .then(snapshot => {\n          let data = [];\n          snapshot.forEach(doc => {\n            data.push(\n              Object.assign(\n                {\n                  id: doc.id\n                },\n                doc.data()\n              )\n            );\n          });\n          resolve(data);\n        })\n        .catch(error => {\n          reject([]);\n        });\n    });\n    return { cards: result };\n  }\n\n  render() {\n    return (\n      <div>\n        <Searchbar />\n        {this.props.cards.map(card => (\n          <Card key={card.id} />\n        ))}\n        <Sidebar />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}